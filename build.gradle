//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

group = 'it.italiandudes'
/*
 * MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH'T'
 * ('T': type of version between "Release"/"Beta"/"Alpha")
 * See https://docs.minecraftforge.net/en/1.12.x/conventions/versioning/
 */
version = '1.12.2-0.1.2.3A'

java {
    archivesBaseName = 'EnhancedEconomy'
    sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                enhancedeconomy {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                enhancedeconomy {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'lib'
    }
    mavenCentral()
}

configurations {
    bundleLibs
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'it.italiandudes:idl:1.0.4'
    bundleLibs 'commons-codec:commons-codec:1.15'
    bundleLibs 'commons-io:commons-io:2.11.0'
    //noinspection VulnerableLibrariesLocal
    bundleLibs 'com.googlecode.json-simple:json-simple:1.1.1'
    bundleLibs 'it.italiandudes:idl:1.0.4'
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "EnhancedEconomy",
            "Specification-Vendor"    : "ItalianDudes",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.version,
            "Implementation-Vendor"   : "ItalianDudes",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.register('buildModJar', Jar) {
    dependsOn jar
    archiveFileName = getRootDir().getName()+"-"+archiveVersion.get()+".jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.bundleLibs.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

buildModJar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// replace values in mcmod.info before packing in jar
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':'1.12.2'
    }

    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}